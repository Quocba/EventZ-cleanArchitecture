// <auto-generated />
using System;
using Identity.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250307085200_updateDBUser")]
    partial class updateDBUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.Domain.Entities.EmailConfirmationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("email_confirmation_tokens");
                });

            modelBuilder.Entity("Identity.Domain.Entities.EventRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("event_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c57b6454-603a-4597-8200-e09f8ca795fe"),
                            Description = "Khách hàng bình thường",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("1348a93d-b890-434f-9d55-829e5e8f3a8b"),
                            Description = "Khách hàng tham gia bằng link",
                            Name = "RegistrationLinkGuest"
                        },
                        new
                        {
                            Id = new Guid("9345487f-f275-46f0-8751-e3d35994e410"),
                            Description = "Khách hàng trả phí",
                            Name = "PaidGuest"
                        },
                        new
                        {
                            Id = new Guid("7fd3c0a5-6883-4d0d-949a-1300d101e71b"),
                            Description = "Khách hàng miễn phí",
                            Name = "FreeGuest"
                        },
                        new
                        {
                            Id = new Guid("80ae6925-6883-4d0d-949a-e3d35994e410"),
                            Description = "Nhân viên",
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refesh_tokens");
                });

            modelBuilder.Entity("Identity.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d39a1c4-5663-4767-80a8-f56c869be5c8"),
                            Description = "Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("1348a93d-b890-434f-9d55-829e5e8f3a8b"),
                            Description = "Staff",
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("80ae6925-a266-455c-9d0c-dc4cd3205ba4"),
                            Description = "User",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<Guid?>("CreateById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("create_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_confirmed");

                    b.Property<bool>("IsPhoneConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("is_phone_confirmed");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d62d1cc-dfde-4580-86e4-d455be5e6c40"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 51, 59, 840, DateTimeKind.Utc).AddTicks(5462),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            Gender = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = false,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 51, 59, 840, DateTimeKind.Utc).AddTicks(5487),
                            LastName = "Admin",
                            PasswordHash = "$2a$11$8gbDuFGvnYI2pw6/jxEp7eqaFtw6A4vnVkp6HRlkyluB1xFguyuxG",
                            Phone = "0386040060",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("69b15efb-62e2-48d8-976a-8edd8f6dd658"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 51, 59, 962, DateTimeKind.Utc).AddTicks(2706),
                            Email = "staff@gmail.com",
                            FirstName = "Staff",
                            Gender = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = false,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 51, 59, 962, DateTimeKind.Utc).AddTicks(2712),
                            LastName = "Staff",
                            PasswordHash = "$2a$11$KE3LwDk8YA5YvAPMDVOgtOE0u4S9rGMfBrzi72zrI5TojkqfANrWO",
                            Phone = "0372599558",
                            UserName = "staff"
                        },
                        new
                        {
                            Id = new Guid("a7ddfb9a-7c54-4444-82af-558936266f97"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 52, 0, 85, DateTimeKind.Utc).AddTicks(2599),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            Gender = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = false,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 52, 0, 85, DateTimeKind.Utc).AddTicks(2610),
                            LastName = "User",
                            PasswordHash = "$2a$11$s8mhhKWJ9EdDpW6YtoeRd.kPKojtFkFuyy1fDW1CWfgq/nBpu99.C",
                            Phone = "0372599559",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("b117f14c-2d22-4bc6-95b5-8f5dff43a0e5"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 52, 0, 207, DateTimeKind.Utc).AddTicks(8134),
                            CreateById = new Guid("4d62d1cc-dfde-4580-86e4-d455be5e6c40"),
                            Email = "guest1@gmail.com",
                            FirstName = "Guest",
                            Gender = 1,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = true,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 52, 0, 207, DateTimeKind.Utc).AddTicks(8144),
                            LastName = "1",
                            PasswordHash = "$2a$11$YQEjvvfoJJpqnVQz6M1h0.hDv0YkD8UwC8vLexe3HN/RUVNcpYxmi",
                            Phone = "0386040060",
                            UserName = "guest1"
                        },
                        new
                        {
                            Id = new Guid("43d12322-38c7-4f89-a95b-b941dfa9564c"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 52, 0, 328, DateTimeKind.Utc).AddTicks(6808),
                            CreateById = new Guid("4d62d1cc-dfde-4580-86e4-d455be5e6c40"),
                            Email = "guest2@gmail.com",
                            FirstName = "Guest",
                            Gender = 1,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = true,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 52, 0, 328, DateTimeKind.Utc).AddTicks(6814),
                            LastName = "2",
                            PasswordHash = "$2a$11$sDGww/6SPNNhn3oNNqvAZeU94zgTnEvR3aU5Edoqe3jXevFD1CDVe",
                            Phone = "0372599558",
                            UserName = "guest2"
                        },
                        new
                        {
                            Id = new Guid("97775ef6-6c52-42ff-8378-0321b5caef4f"),
                            CreateAt = new DateTime(2025, 3, 7, 15, 52, 0, 451, DateTimeKind.Utc).AddTicks(4479),
                            CreateById = new Guid("4d62d1cc-dfde-4580-86e4-d455be5e6c40"),
                            Email = "guest3@gmail.com",
                            FirstName = "Guest",
                            Gender = 1,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsPhoneConfirmed = true,
                            LastModifiedAt = new DateTime(2025, 3, 7, 15, 52, 0, 451, DateTimeKind.Utc).AddTicks(4527),
                            LastName = "3",
                            PasswordHash = "$2a$11$0Fn0RItL/DsLsp.2r1TkIuCCz2t5p0PG69DXErXohCdVWu8oBy/JC",
                            Phone = "0372599559",
                            UserName = "guest3"
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<Guid>("EventRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_role_id");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventRoleId");

                    b.ToTable("user_event");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b117f14c-2d22-4bc6-95b5-8f5dff43a0e5"),
                            EventId = new Guid("98154ede-c3ff-49de-8e0f-3b2f0af2aa6a"),
                            EventRoleId = new Guid("c57b6454-603a-4597-8200-e09f8ca795fe")
                        },
                        new
                        {
                            UserId = new Guid("43d12322-38c7-4f89-a95b-b941dfa9564c"),
                            EventId = new Guid("091cfb4e-f4de-422b-8e2c-992c67a46d7e"),
                            EventRoleId = new Guid("1348a93d-b890-434f-9d55-829e5e8f3a8b")
                        },
                        new
                        {
                            UserId = new Guid("97775ef6-6c52-42ff-8378-0321b5caef4f"),
                            EventId = new Guid("1dbf03f8-4ad9-47bd-b1bf-d0d073e8dba7"),
                            EventRoleId = new Guid("9345487f-f275-46f0-8751-e3d35994e410")
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("RoleID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            RoleID = new Guid("1d39a1c4-5663-4767-80a8-f56c869be5c8"),
                            UserID = new Guid("4d62d1cc-dfde-4580-86e4-d455be5e6c40")
                        },
                        new
                        {
                            RoleID = new Guid("1348a93d-b890-434f-9d55-829e5e8f3a8b"),
                            UserID = new Guid("69b15efb-62e2-48d8-976a-8edd8f6dd658")
                        },
                        new
                        {
                            RoleID = new Guid("80ae6925-a266-455c-9d0c-dc4cd3205ba4"),
                            UserID = new Guid("a7ddfb9a-7c54-4444-82af-558936266f97")
                        },
                        new
                        {
                            RoleID = new Guid("80ae6925-a266-455c-9d0c-dc4cd3205ba4"),
                            UserID = new Guid("b117f14c-2d22-4bc6-95b5-8f5dff43a0e5")
                        },
                        new
                        {
                            RoleID = new Guid("80ae6925-a266-455c-9d0c-dc4cd3205ba4"),
                            UserID = new Guid("43d12322-38c7-4f89-a95b-b941dfa9564c")
                        },
                        new
                        {
                            RoleID = new Guid("80ae6925-a266-455c-9d0c-dc4cd3205ba4"),
                            UserID = new Guid("97775ef6-6c52-42ff-8378-0321b5caef4f")
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.EmailConfirmationToken", b =>
                {
                    b.HasOne("Identity.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Identity.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Domain.Entities.User", b =>
                {
                    b.HasOne("Identity.Domain.Entities.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("Identity.Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("Identity.Domain.Entities.EventRole", "EventRole")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Identity.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Domain.Entities.EventRole", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Identity.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Identity.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
